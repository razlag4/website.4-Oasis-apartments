AOS.init({
      duration: 1200,
      once: true
    });

    // ü¶ã –†–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä
class FloatingShape {
  constructor(svgTemplate) {
    this.element = svgTemplate.cloneNode(true);
    this.element.classList.add('floating-decor');
    document.body.appendChild(this.element);

    this.x = Math.random() * window.innerWidth;
    this.y = Math.random() * window.innerHeight;
    this.angle = Math.random() * Math.PI * 2;
    this.speed = 0.3 + Math.random() * 0.5;
    this.element.style.opacity = '0.1';

    const g = this.element.querySelector('g');
    if (g) {
      g.style.transformOrigin = 'center';
    }
  }

  update() {
    this.angle += Math.sin(Date.now() / 2000 + this.x) * 0.002;
    this.x += Math.cos(this.angle) * this.speed;
    this.y += Math.sin(this.angle) * this.speed;

    if (this.x < -150) this.x = window.innerWidth + 150;
    if (this.x > window.innerWidth + 150) this.x = -150;
    if (this.y < -150) this.y = window.innerHeight + 150;
    if (this.y > window.innerHeight + 150) this.y = -150;

    const rotation = this.angle * 180 / Math.PI;
    this.element.style.transform = `translate(${this.x}px, ${this.y}px) rotate(${rotation}deg)`;
  }
}

window.addEventListener("DOMContentLoaded", () => {
  const svgTemplate = document.querySelector('.decor-top-left');
  if (svgTemplate) {
    const shapes = [];
    const totalShapes = 8; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–±–∞–±–æ—á–µ–∫"

    for (let i = 0; i < totalShapes; i++) {
      const shape = new FloatingShape(svgTemplate);
      shapes.push(shape);
    }

    // –ü—Ä—è—á–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ svg-—à–∞–±–ª–æ–Ω—ã
    svgTemplate.style.opacity = '0';
    svgTemplate.style.pointerEvents = 'none';
    svgTemplate.style.position = 'absolute';
    svgTemplate.style.left = '-9999px';

    const bottomSvg = document.querySelector('.decor-bottom-right');
    if (bottomSvg) {
      bottomSvg.style.opacity = '0';
      bottomSvg.style.pointerEvents = 'none';
      bottomSvg.style.position = 'absolute';
      bottomSvg.style.left = '-9999px';
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è
    function animate() {
      shapes.forEach(shape => shape.update());
      requestAnimationFrame(animate);
    }
    animate();
  }
});




// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ---
const datesGrid = document.getElementById('datesGrid');
const timesGrid = document.getElementById('timesGrid');
const dateRange = document.getElementById('dateRange');
const availableText = document.getElementById('availableText');
const confirmBtn = document.getElementById('confirmBtn');

// --- –°–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ ---
const timeSlots = [
  '10:00 AM','11:00 AM','12:00 PM','01:00 PM',
  '02:00 PM','03:00 PM','04:00 PM','05:00 PM'
];

// --- –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è (—Ç–µ–∫—É—â–∞—è) ---
let currentWeekStart = new Date();
currentWeekStart.setHours(0, 0, 0, 0);

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω–µ–¥–µ–ª–∏ ---
function renderWeek() {
  datesGrid.innerHTML = '';

  const end = new Date(currentWeekStart);
  end.setDate(end.getDate() + 6);

  // –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: October 5, 2025 - October 11, 2025)
  dateRange.textContent = `${currentWeekStart.toLocaleDateString('en-US', { month: 'long', day: '2-digit', year: 'numeric' })} - ${end.toLocaleDateString('en-US', { month: 'long', day: '2-digit', year: 'numeric' })}`;

  // ‚è™ –∫–Ω–æ–ø–∫–∞ "–ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è"
  const prev = document.createElement('label');
  prev.className = 'date-item special';
  prev.innerHTML = `<span><svg width="24" height="24" viewBox="0 0 24 24" fill="none"
     xmlns="http://www.w3.org/2000/svg">
  <path d="M15 6L9 12L15 18"
        stroke="#61C0D8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</span>`;
  prev.addEventListener('click', () => {
    const minDate = new Date();
    minDate.setHours(0, 0, 0, 0);
    const temp = new Date(currentWeekStart);
    temp.setDate(temp.getDate() - 7);
    if (temp >= minDate) {
      currentWeekStart = temp;
      renderWeek();
    }
  });
  datesGrid.appendChild(prev);

  // 7 –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
  for (let i = 0; i < 7; i++) {
    const date = new Date(currentWeekStart);
    date.setDate(date.getDate() + i);

    const label = document.createElement('label');
    label.className = 'date-item';

    const input = document.createElement('input');
    input.type = 'radio';
    input.name = 'date';
    input.value = date;

    const span = document.createElement('span');
    span.innerHTML = `${date.toLocaleDateString('en-US', { weekday: 'short' })}<br>${String(date.getDate()).padStart(2, '0')}`;

    label.appendChild(input);
    label.appendChild(span);

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω
    if (i === 0) {
      input.checked = true;
      label.classList.add('selected');
      updateTimes(date);
    }

    // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –¥—Ä—É–≥–æ–π –¥–∞—Ç—ã
    input.addEventListener('change', () => {
      document.querySelectorAll('.date-item').forEach(el => el.classList.remove('selected'));
      label.classList.add('selected');
      updateTimes(date);
    });

    datesGrid.appendChild(label);
  }

  // ‚è© –∫–Ω–æ–ø–∫–∞ "—Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"
  const next = document.createElement('label');
  next.className = 'date-item special';
  next.innerHTML = `<span><svg width="24" height="24" viewBox="0 0 24 24" fill="none"
     xmlns="http://www.w3.org/2000/svg">
  <path d="M9 6L15 12L9 18"
        stroke="#61C0D8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</span>`;
  next.addEventListener('click', () => {
    const maxDate = new Date();
    maxDate.setFullYear(maxDate.getFullYear() + 1); // –º–∞–∫—Å–∏–º—É–º –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä—ë–¥
    const temp = new Date(currentWeekStart);
    temp.setDate(temp.getDate() + 7);
    if (temp <= maxDate) {
      currentWeekStart = temp;
      renderWeek();
    }
  });
  datesGrid.appendChild(next);
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–µ–º—ë–Ω ---
function updateTimes(selectedDate) {
  timesGrid.innerHTML = '';
  availableText.textContent = `Available times on ${selectedDate.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' })}`;

  timeSlots.forEach((time, index) => {
    const label = document.createElement('label');
    label.className = 'time-item';

    const input = document.createElement('input');
    input.type = 'radio';
    input.name = 'time';
    input.value = time;

    const span = document.createElement('span');
    span.textContent = time;

    // –ü–µ—Ä–≤—ã–π —Å–ª–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (index === 0) {
      input.checked = true;
      label.classList.add('selected');
      updateConfirmText(selectedDate, time);
    }

    input.addEventListener('change', () => {
      document.querySelectorAll('.time-item').forEach(el => el.classList.remove('selected'));
      label.classList.add('selected');
      updateConfirmText(selectedDate, time);
    });

    label.appendChild(input);
    label.appendChild(span);
    timesGrid.appendChild(label);
  });
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
function updateConfirmText(date, time) {
  confirmBtn.textContent = `CONFIRM ${date.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' })} AT ${time}`;
}

// --- –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä ---
renderWeek();
